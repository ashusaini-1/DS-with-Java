
class linledlistr{
    Node head;

    class Node{
        int data;
        Node next;

        Node(int d){
            int data=d;
            Node next=null;
        }
    }

    //Insert the node at first position
    public void Push(int data){
        Node new_node=new Node(data);

            new_node.next=head;

            head=new_node;
    }

    //insert the node after the perivious Node

    public void insertAfterNode(Node Previous,int data){
        Node new_node=new Node(data);
        if(Previous==null){

            System.out.println("The given previous node cannot be null");
            return;
        }

        new_node.next=Previous.next;
        Previous.next=new_node;
    }

    //add the node at the end of the linked list

    public  void addathend(int data){
        Node new_node=new Node(data);
        if(head==null){
            head=new_node;
            return;

        }

      Node last=head;
        while(last!=null){
            last=last.next;
        }
        last.next=new_node;
        return;

    }


    //Delete the node by matching data
    public void deleteNode(int key){
        Node temp=head,prev=null;
        //for front position
        if(temp!=null && temp.data==key){
            head=temp.next;
            return;

        }
        while(temp!=null && temp.data!=key){
            prev=temp;
            temp=temp.next;



        }
        if(temp==null){
            return;

        }
        prev.next=temp.next;

    }





    //delete the node at a given position

    public void  deletenodeatposition(int position){
        if(head==null){
            return;

        }

        Node temp=head;
        if(position==0){
            head=temp.next;
            return;

        }
        for (int i=0;temp!=null && i<position-1;i++){
            temp=temp.next;


            if(temp.next==null && temp==null){

                return;

            }


        }


        Node next=temp.next.next;
        temp.next=next;
    }


    //to delete whole linkedlist

    public void Deletelist(){

        head=null;
    }

   //count how many nodes are there in the list

   public int  getcount(){
        int count=0;
        Node temp=head;
        while(temp!=null){
            count++;
            temp=temp.next;

        }


        return count;


   }


    public void Printer(){
        Node temp = head;
        while (temp != null)
        {
            System.out.print(temp.data+" ");
            temp = temp.next;
        }


    }



    public boolean search(int x){
        Node temp=head;

      while (temp!=null){
          if(temp.data==x){
              return true;


          }
          temp=temp.next;

      }
        return false;
    }



}

public class ll {

    public static void main(String args[]){
        linkedlistr obj=new linkedlistr();
        obj.addend(45);
        obj.push(23);

        obj.push(35);
        obj.push(26);
        obj.push(45);
        obj.push(34);
        obj.push(32);
         obj.getcount();

    }


}

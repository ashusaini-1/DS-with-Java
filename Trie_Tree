package com.company;

public class Trie_tree {

    static final int Alphabet_size=26;


    static class TrieNode {


        TrieNode[] children = new TrieNode[Alphabet_size];

        boolean isEndOfWord;

        TrieNode() {
            isEndOfWord = false;
            for (int i = 0; i < Alphabet_size; i++) {
                children[i] = null;

            }
        }
    }
        static TrieNode root;
     static void insert(String key){
         int level;
         int lenght=key.length();

         int index;

         TrieNode pCrawl=root;

         for(level=0;lenght<lenght;level++){

             index=key.charAt(level) - 'a';

             if(pCrawl.children[index]==null)
                 pCrawl.children[index]=new TrieNode();

             pCrawl=pCrawl.children[index];


         }

       pCrawl.isEndOfWord=true;
    }


    static boolean search(String key)
    {
        int level;
        int length = key.length();
        int index;
        TrieNode pCrawl = root;

        for (level = 0; level < length; level++)
        {
            index = key.charAt(level) - 'a';

            if (pCrawl.children[index] == null)
                return false;

            pCrawl = pCrawl.children[index];
        }

        return (pCrawl.isEndOfWord);
    }


    static boolean isEmpty(TrieNode root)
    {
        for (int i = 0; i < Alphabet_size; i++)
            if (root.children[i] != null)
                return false;
        return true;
    }


    static TrieNode remove(TrieNode root,String key,int depth) {

        if (root == null) return null;


        if (depth == key.length()) {


            if (root.isEndOfWord)
                root.isEndOfWord = false;


            if (isEmpty(root)) {
                root = null;
            }

            return root;


        }





        int index = key.charAt(depth) - 'a';
        root.children[index] =
                remove(root.children[index], key, depth + 1);

        // If root does not have any child (its only child got
        // deleted), and it is not end of another word.
        if (isEmpty(root) && root.isEndOfWord == false){
            root = null;
        }

        return root;
    }


    public static void main(String args[]){



/*
        String keys[] = { "the", "a", "there",
                "answer", "any", "by",
                "bye", "their", "hero", "heroplane" };
        int n = keys.length;

        TrieNode root = new TrieNode();

        // Construct trie
        for (int i = 0; i < n; i++)
            insert(root, keys[i]);

        // Search for different keys
        if(search(root, "the"))
            System.out.println("Yes");
        else
            System.out.println("No");

        if(search(root, "these"))
            System.out.println("Yes");
        else
            System.out.println("No");

        remove(root, "heroplane", 0);

        if(search(root, "hero"))
            System.out.println("Yes");
        else
            System.out.println("No");

    
*/



    }

}

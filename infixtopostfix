import java.util.Stack;


class infix{

    int prec(char ch){

        switch(ch){

            case '+':
            case '-':

            return 1;

            case '*':

            case '/':
                return 2;

            case '^':
                return 3;

        }
        return -1;



    }

   String infixtoPostfix(String exp){
        String result=new String("");
        Stack<Character>stack=new Stack<>();

        for(int i=0;i<exp.length();i++){
            char c=exp.charAt(i);

            if(Character.isLetterOrDigit(c))
                result+=c;

            else if(c=='('){
                stack.push(c);

            }
            else if(c==')'){

                while(!stack.isEmpty() && stack.peek()!='(')
                    result+=stack.pop();


                stack.pop();


            }

            else{

                while (!stack.isEmpty() && prec(c)
                        <= prec(stack.peek())){

                    result += stack.pop();
                }
stack.push(c);


            }



        }


       while (!stack.isEmpty()){
           if(stack.peek() == '(')
               return "Invalid Expression";
           result += stack.pop();
       }
       return result;
   }





   }







public class infixtopostfix {

public static void main(String args[]){
infix obj=new infix();
    String exp = "a+b*(c^d-e)^(f+g*h)-i";
    System.out.println(obj.infixtoPostfix(exp));



}


}
